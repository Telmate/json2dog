#!/usr/bin/perl

use strict;
use warnings;

use sigtrap qw/handler  handle_death  normal-signals/;

use Data::Dumper;
use LWP::UserAgent;
use JSON;
use IO::Handle;
use Try::Tiny;

use DataDog::DogStatsd;

# options
my $debug = $ENV{JSON2DOG_DEBUG} || 0;
my $log_file = $ENV{JSON2DOG_LOG} || undef;
my $pid_file = $ENV{PIDFILE} || undef;
my $delay = 60; # seconds

my $use_curl = 0; # true if curl is better than LWP
#$use_curl = 1 if -e '/etc/redhat-release';
#print "use_curl = $use_curl\n";

# read command line arguments
my ($health_url,$statsd_base,$kafka_hostnames) = @ARGV;

daemonize() unless $debug;

# open log file
our $log_fh;
if (defined $log_file) {
	open $log_fh, '>>', $log_file or die "couldn't open $log_file: $!";
} else {
	# log to STDOUT
	open $log_fh, '>&STDOUT' or die "couldn't copy STDOUT: $!";
	error("no JSON2DOG_LOG defined, using STDOUT");
}

# defaults
unless (defined $health_url) {
	$health_url = 'https://jsonplaceholder.typicode.com/posts/1';
	error("checking $health_url");
}

unless (defined $statsd_base) {
	$statsd_base = 'test.json';
	error("defaulting stats_base to '$statsd_base'.");
}
my @log_minutes = qw( 1 10 60 ); # and every 60x minutes
my $stats_sent = 0; # initialize counter
my $lwp_agent;

# instances of handy objects
my $dogstatsd = DataDog::DogStatsd->new;
$dogstatsd->{port} = find_port();
my $json = JSON->new->allow_nonref;

my @array_hostnames = split(',', $kafka_hostnames, length($kafka_hostnames));
#print(@array_hostnames);
my @connector_parse_name = split('/', $health_url, length($health_url));
#print($connector_parse_name[4]);


# keep pulling stats until we get killed
while (1) {
        #print($health_url);
        my $raw_html;
        my $hostname_size = scalar @array_hostnames;
        for (my $host=0; $host < $hostname_size; $host++) {
            (my $health_url_replace = $health_url) =~ s/HOSTNAME/$array_hostnames[$host]/;
            $raw_html = http_get($health_url_replace);
                if (index($raw_html, 'Connection refused') != -1){
		  print($health_url_replace);
                  print('Try with different Kafka Connect host....');
                  next;
                }

             last;
        }


        if (index($raw_html, 'Connection refused') != -1){
            my $metric_label_Connrefused = $statsd_base . '.' . $connector_parse_name[4] . '.' . "state";
            $dogstatsd->gauge( $metric_label_Connrefused, -1);
            $stats_sent++;
            timed_log($stats_sent);
            sleep($delay);
            next;         
        }

	unless (defined $raw_html and length $raw_html) {
		my $sleep_time = int(rand(30));
		error("no data back from $health_url, sleeping for $sleep_time seconds");
		sleep($sleep_time);
		next; # try again
	}

	my $health_resp = $json->decode($raw_html);
	error(Dumper($health_resp)) if $debug > 1;


        foreach my $key (keys $health_resp ){
            if ($key eq "connector") {
              my $value = $health_resp->{$key};
              my $connector_json = encode_json $value;
              my $connector_resp = $json->decode($connector_json);
              foreach my $connector_key (keys %$connector_resp) {
                      my $connector_status = $connector_resp->{state};
                      my $connector_value = $connector_status eq "RUNNING" ? 1 : 0;
                      my $connector_name = $health_resp->{name};
                      my $metric_label = $statsd_base . '.' . $connector_name . '.' . "state" ;
                      error("$metric_label -> $connector_value") if $debug;
                      $dogstatsd->gauge( $metric_label, $connector_value);
                      $stats_sent++;
              	    }
              }
        }

	timed_log($stats_sent);

	error("") if $debug;
	sleep($delay);
}

sub http_get {
	my ($url) = @_;

	my $raw;
	unless ($use_curl) {
		# LWP
		unless (defined $lwp_agent) {
			$lwp_agent = LWP::UserAgent->new;
			$lwp_agent->ssl_opts(verify_hostname => 0);
		}
		my $response = $lwp_agent->get($url);
		$raw = $response->content;
		error($raw) if $debug;
	} else {
		$raw = curl($url);
	}

	#print "$raw\n";
	return $raw;
}

sub curl {
	my ($url) = @_;
	my $output = `curl -sk $url`;
	return $output;
}

sub find_port {
	my @possible_ports = qw(8125 1025);

	if ( defined $ENV{DOGSTATSD_PORT} ) {
		unshift(@possible_ports, $ENV{DOGSTATSD_PORT});
	}

	foreach my $port (@possible_ports) {
		my $output = `netstat -na | grep :$port`;
		if (length($output)) {
			error("talking to port $port");
			return $port;
		}
	}

	error("ERROR: no dogstatsd port to talk to");
	die;
}

sub error {
	my ($log_message) = @_;

	my $now = gmtime(time);
	my $hostname = 'localhost:';
	if (defined $ENV{HOSTNAME}) {
		$hostname = $ENV{HOSTNAME} . ':';
	}

	print $log_fh "$now ${hostname}[$$] $log_message\n";
	$log_fh->flush();
}

sub handle_death {
	my $sig_name = shift;
	error("exiting on signal $sig_name");
	exit(1);
}

sub timed_log {
	my ($log_message) = @_;

	my $running = (time - $^T) / 60;
	$running = sprintf("%.1f",$running);

	my $show_minutes = $log_minutes[0];

	return unless $running > $show_minutes;

	error("$log_message metrics sent over $running minutes");

	shift @log_minutes;
	unless (scalar @log_minutes) {
		# empty @log_minutes
		push(@log_minutes, $show_minutes + 60);
		error("adding to log_minutes $show_minutes+60") if $debug;
	}
	#die;
}

# mostly from https://stackoverflow.com/a/768448/2002471
sub daemonize {
	use POSIX;
	POSIX::setsid or die "setsid: $!";

	my $pid = fork ();
	if ($pid < 0) {
		die "fork: $!";
	} elsif ($pid) {
		exit 0;
	}

	chdir "/";
	umask 0;
	foreach (0 .. (POSIX::sysconf (&POSIX::_SC_OPEN_MAX) || 1024)) {
		POSIX::close $_;
	}
	open (STDIN, "</dev/null");
	open (STDOUT, ">/dev/null");
	open (STDERR, ">&STDOUT");

	if (defined $pid_file) {
		open(my $pid_fh,'>',$pid_file) or die "couldn't open(>$pid_file): $!";
		print $pid_fh "$$\n";
		close($pid_fh) or die "couldn't close(>$pid_file): $!";
	}
}
